0. 디렉터리(폴더) 생성
   이름은 영어(한글 X)

  공유폴더
	
  \\211.238.142.46


1. 개발 환경 설정
	- STS Down
	  https://github.com/spring-projects/toolsuite-distribution/wiki/Spring-Tool-Suite-3

	- STS 환경 설정
	  1) Encoding(UTF-8)
		Geeral 	-> workspace
		Web 	-> css, html, jsp

	  2) Web Browser
		window -> Web Browser -> Chrome

	  3) WAS(Web Server)	
		- 내장 server 사용


2. Project 생성

  1)  File -> new -> Spring Legacy Project
  2)  Project Name 입력
  3) Spring MVC template 선택
  4) 패키지명 3단계 (com.iu.컨텍스트명)

3. Project 기본 설정

   pom.xml(변경)
	<properties>
		<java-version>1.8</java-version>
		<org.springframework-version>4.3.2.RELEASE</org.springframework-version>
		....

	----------------------------------------------------------------------------------------------------

	 <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.5.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>

	     ......	


4. Test 환경 설정

    1) JUNIT 테스트 도구

    2) API (pom.xml)
	<!-- Test 변경-->
	<dependency>
		<groupId>junit</groupId>
		<artifactId>junit</artifactId>
		<version>4.12</version>
		<scope>test</scope>
	</dependency> 
		
	<!-- spring-test 추가 -->
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-test</artifactId>
	    <!-- 현재 사용하는 Spring version과 동일 -->	
	    <version>${org.springframework-version}</version>
	    <scope>test</scope>
	</dependency>


    3) Junit Test case 생성
	- src/test/java
	- new -> Junit Test Case 
	- error : 프로젝트 우클릭 -> maven -> update project -> Ok
	- 클래스 선언부
	@RunWith(SpringJUnit4ClassRunner.class)
	@ContextConfiguration(locations = "file:src/main/webapp/WEB-INF/spring/**/*-context.xml")
	
	- Test 용 메서드 선언
	- 메서드 선언부
	@Test


	


5. DI(Defendency Injection, 의존성 주입) 와 IOC(Inversion Of Control, 제어의 역전)
	- 개발자의 객체 생성 코드 작업을 최소화
	- 객체 생성과 주입
	- Bean	: Spring에서 관리하는 객체
	- Container : Bean의 생명주기를 관리 (Spring Container)
	- IOC : 개발자가 아니라 Spring으로 객체의 생성과 주입을 위임



   1) XML
	객체 생성
	<bean class="풀패키지명.클래스명" id="참조변수명" init-method="초기화메서드명" destroy-method="destroy메서드명">
	    주입(setter)
	    <property name="setter명" value="primitive type" or ref="참조변수명" />
	    주입(생성자, index)
	   <constructor-arg index="순서번호" value="primitive type" or ref="참조변수명" />
	     주입(생성자, type)
	   <constructor-arg type="매개변수의 DataType" value="primitive type" or ref="참조변수명" />	
	     주입(생성자, name)
	   <constructor-arg name="매개변수 변수명" value="primitive type" or ref="참조변수명" />		
	</bean>
	 
	

  2) Annotation
	
	a. 객체 생성
	    클래스의 선언부 위에 
	    SingleTon 	: 객체가 딱 한개만 생성
	- @Controller 	: 객체 생성, Controller 역할 부여
	- @Service	: 객체 생성, Service 역할 부여
	- @Repository	: 객체 생성, Repository(DAO) 역할 부여
	- @Component	: 객체 생성, 그외 나머지 역할
	-- 공통 
	- @Qualifier("클래스이름")



	b. 객체 주입
	- @Autowired	: 멤버변수 선언부, setter 메서드 선언부, 생성자 선언부
			: Type으로 찾아서 Inject
			: Spring 에서 제공
	   -- @Qualifier("클래스이름") : 같은 Type이면 이름으로 찾아서 Inject

	- @Inject		: 멤버변수 선언부, setter 메서드 선언부, 생성자 선언부
			: Type으로 찾아서 Inject
			: Java 에서 제공

	- @Resource(name=""): 멤버변수 선언부, setter 메서드 선언부
			: Name으로 찾아서 Inject	



	@PostConstruct	: 객체 생성 후 초기화 메서드
	@PreDestroy	: 객체 소멸 직전 메서드



--------------------------------------------------------------------------------------


Spring Bean Configure 파일 생성 과 관리

1. Spring Bean Configure 파일 생성

    우클릭 -> new -> Spring bean configuration ...

    2) 파일의 이름은 ***-context.xml 로 생성

    3) 파일의 위치

	a) /WEB-INF/spring/**/***-context.xml

	b) /src/main/resources/**/***-context.xml

    4) 파일 적용

	a) Web.xml에 등록

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
		/WEB-INF/spring/root-context.xml
		
		/WEB-INF/spring/sample-context.xml
		
		classpath:sample-context.xml
		
		 classpath:*-context.xml

		</param-value>
	</context-param>

	b) <import > 태그 사용	
	
	***-context.xml

	<import resource="classpath:sample-context.xml"/>
	<import resource="classpath:*-context.xml"/>
	<import resource="/WEB-INF/spring/sample-context.xml"/>
	<import resource="/WEB-INF/spring/*-context.xml"/>


Properties 파일 생성과 관리


-------------------------------------------------------------------------------------------

MyBatis Framework 

1. API ( pom.xml )

   - mybatis
   - mybatis-spring
   - spring-jdbc
   - ojdbc


		<!-- mybatis -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis</artifactId>
		    <version>3.4.6</version>
		</dependency>
		
		<!-- mybatis-spring -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis-spring</artifactId>
		    <version>1.3.2</version>
		</dependency>
		
		<!-- spring-jdbc -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-jdbc</artifactId>
		    <!-- 현재 사용하는 spring version과 동일하게 -->
		    <version>${org.springframework-version}</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/com.oracle.ojdbc/ojdbc8 -->
		<dependency>
		    <groupId>com.oracle.ojdbc</groupId>
		    <artifactId>ojdbc8</artifactId>
		    <version>19.3.0.0</version>
		</dependency>

2. XML 객체 생성
	    a. DB 연결 클래스		
	        <bean class="org.springframework.jdbc.datasource.DriverManagerDataSource" id="dataSource">
		<property name="username" value="spring01" />
		<property name="password" value="spring01" />
		<property name="url" value="jdbc:oracle:thin:@192.168.56.101:1521:xe" />
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
                     </bean>

	    b. Connection과 XML 파일 연결
	        <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:/myBatis/mappers/**/*Mapper.xml"></property>
	        </bean>

	   c. 결과 매핑
	        <bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"></constructor-arg>
	        </bean>

	-- Mapper.xml
	   <mapper namespace="DAO의풀패키지명.클래스명">
	        <insert id="" parameterType="풀패키지명.클래스명">
		
		//멤버변수명에 setter가 존재
		//이름이 다르거나 DTO에 변수가 없는 경우
		  -- DAO
  		      HashMap<String, Object> map = new HashMap<String, Object>(); 	
		      map.put("boardDTO", boardDTO);
		      map.put("pnum", 0);
		   -- mapper
		      keyproperty="pnum" 			 
	        </insert>
	        <update id=""></update>
	        <delete id=""></delete>		
	        <select id="" resultType="풀패키지명.클래스명" parameterType="풀패키지명.클래스명"></select>	





----------------------------------------------------------------------------------------------------------------------------
	Controller 작성

	POJO(Plain Old Java Object) 기반

	1. Java 클래스 생성
	2. 클래스 선언부
		@Controller
		@RequestMapping(value="URL주소")
	3. 요청 처리를 하는 메서드 선언
		3_1 : 메서드 선언부
			@RequestMapping(value="URL주소", method=메서드형식)

		3_2 : 메서드 매개변수 선언부 (주로 파라미터나, 필요한 데이터를 받을 때 사용)

		     parameter 처리
			1) HttpServletRequest request	
			2) parameter의 이름과 동일한 변수명, 동일한 데이터타입 선언
			3) bean (VO, DTO)를 선언

		3_3 : 메서드 리턴 타입
			: 어떤타입을 리턴하더라도 최종적으로 Spring에서 ModelAndView라는 객체를 리턴 




	--------------------------------------------------------------------------------------------------------------

	FileUpload

	1. API
	   commons-fileupload

	2. form 태그의 속성 중 enctype=multipart/form-data
	   method=post

	3. ***-context.xml
	<bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
		<!-- 파일 하나당 size -->
		<property name="maxUploadSizePerFile" value="10485760" />
		<!-- 파일 총 size -->
		<property name="maxUploadSize" value="104857600"/>
	</bean>

	4. Controller의 메서드의 매개변수로
	   1) 파일이 하나인 경우
	      MultipartFile 파라미터명

                2) 파일이 여러개인 경우(파라미터 이름은 동일하게)
	      MultipartFile  [ ]  파라미터명	     

----------------------------------------------------------------------------------------
AOP (Aspect Oriented programming, 관점 지향 프로그래밍)
	- OOP(Object Oriented Programming, 객체 지향 프로그래밍)
	- 모든 개념을 객체로 취급
	- OOP 프로그래밍을 보완
	- 횡적 관심사 

	주요 개념
	1. Join Point(Transfer class)
	   - 횡단 관심이 동작할 수 있는 실행 가능한 특정 위치.
	   - 공통관심 사항이 있는 위치(class) 
	2. Point Cut(bus, subway)
	   - Join point의 실제 공통관심(method)

	3. Advice(Cardcheck)
	   - join point 동작하는 코드


	4. Aspect
	  - Advice와 point cut의 조합
	
	5. Weaving
	  - pointcut Advice에 삽입 하는 과정



	Advice 적용하는 시점
	1. Before Advice 		: poincut 실행하기전
	2. After Returnning Advice	: pointcut 실행 한 후 (예외가 발생 하지 않음)
	3. After Throwing Advice	: pointcut 실행 한 후 (예외가 발생 했을 때만)
	4. After Advice		: pointcut 실행 한 후(정상종료 또는 예외 발생)
	5. Around		: pointcut 실행 전후(정상종료 또는 예외 발생)




	AOP 적용 방식
	API(pom.xnl)
		<!-- spring-aop -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-aop</artifactId>
		    <version>${org.springframework-version}</version>
		</dependency>
			
				
		<!-- aspectjweaver -->
		<dependency>
		    <groupId>org.aspectj</groupId>
		    <artifactId>aspectjweaver</artifactId>
		    <version>${org.aspectj-version}</version>
		</dependency>
		
		
		<!-- AspectJ -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>	

	1. xml
	  execution(접근지정자 패키지.클래스명.메서드)
	  execution(public *.*)	: public 메서드
  	  execution(* set*(..))	: 메서드명이 set으로 시작하는 모든 메서드
	  execution(* com.iu.service.TestService.*(..))	: com.iu.service.TestService 의 모든 메서드
	  execution(* com.iu.service.*.*(..))		: com.iu.service 내의 모든 클래스내의 모든 메서드
	  execution(* com.iu.service..*.*(..))		: com.iu.service 내의 하위패키지 포함, 모든 클래스내의 모든 메서드	
	  execution(* get*(*))			: get으로 시작하는 메서드 들 중 매개변수 하나가 존재
	  execution(* get*(*, *))			: get으로 시작하는 메서드 들 중 매개변수 두개가 존재	
	  execution(* get*(Integer,.. ))			: get으로 시작하는 메서드 들 중 첫번째 파라미터 타입이 Integer 타입이고, 1개 이상 파라미터 존재
	  execution(* get*(*)) && execution(* set*(..))	
	  execution(* get*(*)) || execution(* set*(..))		

	  within(com.iu.service.*)			: com.iu.service 내의 모든 클래스내의 모든 메서드
	  within(com.iu.service..*) 			: com.iu.service 내의 하위패키지 포함, 모든 클래스내의 모든 메서드	


	AOP 설정 방식

	1. XML
	<!-- Advice 역할 객체 생성 -->
	<beans:bean class="com.iu.s3.aop.Card" id="card"></beans:bean>
	
	<aop:config>
		<aop:aspect ref="card">
			<!-- pointCut 설정 -->
			<aop:pointcut expression="execution(* com.iu.s3.aop.Transfer.*())" id="trans"/>
			<!--advice 실행시기 -->
			<aop:after method="cardCheck" pointcut-ref="trans"/>
		</aop:aspect>
	</aop:config>


	2. Annotation
	1) ***-context.xml
	<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
	2) Card class 참고



	AOP를 이용한  Transaction 처리

	1. API(pom.xml)
		<!-- spring-tx -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-tx</artifactId>
		    <version>${org.springframework-version}</version>
		</dependency>

	1. XML
	
	<!-- transaction 관리자 설정 -->
	<bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="txManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- transaction advice 설정 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="*" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
	<aop:pointcut expression="execution(* com.iu.member.MemberService.mqtest(..))" id="requriedTx"/>
	<aop:advisor advice-ref="txAdvice" pointcut-ref="requriedTx"/>
	</aop:config> 


	2. Annotation
	 Service class의 선언부에 @Transactional(RolbackFor=Exception.class)  선언
	***-context.xml	
	<bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="txManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven proxy-target-class="true"/>


-----------------------------------------------------------------------------------------

	Filter
	DispatherServlet에 들어오기 전 
	Client 나가기전
	Interceptor
	1. Interceptor 클래스 생성





----------------------------------------------------------------------------------------------


	ex) 회원관리	
	회원가입		/member/memberJoin
	로그인		/member/memberLogin
	회원정보
	로그아웃
	탈퇴




---------------------------------------------------------------------------
	요청의 구성

	URL 
	method 형식
		1) GET	
			- parameter가 head(주소창에 노출)에 담겨서 전송
			- 작은 데이터만 가능
			- 보안이 요구 되지 않는 요청
		2) POST
			- parameter가 body(주소창에 노출 X)에 담겨서 전송
			- 큰 데이터를 전송 할 때
			- 보안이 요구 될 때 


		서버로 전송 요청 방식 
		1. 주소창에 직접 URL 주소		: GET
		2. <a href="URL주소">		: GET
		3. javascript에 location.href="URL주소" : GET
		4. form 태그 사용
		    <form action="URL주소" method="get">
		    <form action="URL주소" method="post">

		5. ajax


----------------------------------------------------------------------------------------------------

	WAS

	클라이언트에서 요청이 발생 하면 
	요청의 모든 정보를 Request 객체를 생성하고(Response 객체도 같이 생성) 저장

	클라이언트로 보낼 데이터는 Response에 담아서 전송

	전송이 끝나면 만들어진 Request 객체와 Response는 소멸






	
	
Web Programming

	회원관리

	게시판
	공지사항
	QnA
--------------------------------------------------------------------

	JSON

	1.API
	














